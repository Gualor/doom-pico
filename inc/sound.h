/* Header guard ------------------------------------------------------------- */

#ifndef SOUND_H
#define SOUND_H

/* Includes ----------------------------------------------------------------- */

#include <stdbool.h>
#include <stdint.h>

#include "constants.h"

/* Definitions -------------------------------------------------------------- */

#define MUS_S1_SND_LEN 40
static const uint8_t mus_s1_snd[MUS_S1_SND_LEN] = {
    0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
    0x99, 0x99, 0x99, 0x99, 0x00, 0x00, 0x00, 0x00, 0x99, 0x99, 0x99, 0x99,
    0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99, 0x99,
    0x00, 0x00, 0x00, 0x00};

#define MUS_P1_SND_LEN 20
static const uint8_t mus_p1_snd[MUS_P1_SND_LEN] = {
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00};

#define MUS_P2_SND_LEN 20
static const uint8_t mus_p2_snd[MUS_P2_SND_LEN] = {
    0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33, 0x33,
    0x33, 0x33, 0x33, 0x33, 0x00, 0x00, 0x00, 0x00};

#define MUS_P3_SND_LEN 20
static const uint8_t mus_p3_snd[MUS_P3_SND_LEN] = {
    0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
    0x43, 0x43, 0x43, 0x43, 0x00, 0x00, 0x00, 0x00};

#define MUS_P4_SND_LEN 20
static const uint8_t mus_p4_snd[MUS_P4_SND_LEN] = {
    0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
    0x58, 0x58, 0x58, 0x58, 0x00, 0x00, 0x00, 0x00};

#define MUS_P5_SND_LEN 20
static const uint8_t mus_p5_snd[MUS_P5_SND_LEN] = {
    0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53, 0x53,
    0x53, 0x53, 0x53, 0x53, 0x00, 0x00, 0x00, 0x00};

#define MUS_P6_SND_LEN 20
static const uint8_t mus_p6_snd[MUS_P6_SND_LEN] = {
    0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48, 0x48,
    0x48, 0x48, 0x48, 0x48, 0x00, 0x00, 0x00, 0x00};

#define MUS_P7_SND_LEN 20
static const uint8_t mus_p7_snd[MUS_P7_SND_LEN] = {
    0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58,
    0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58, 0x58};

#define MUS_S21_SND_LEN 40
static const uint8_t mus_s21_snd[MUS_S21_SND_LEN] = {
    0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89,
    0x89, 0x89, 0x89, 0x89, 0x00, 0x00, 0x00, 0x00, 0x89, 0x89, 0x89, 0x89,
    0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89, 0x89,
    0x00, 0x00, 0x00, 0x00};

#define MUS_P21_SND_LEN 20
static const uint8_t mus_p21_snd[MUS_P21_SND_LEN] = {
    0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15,
    0x15, 0x15, 0x15, 0x15, 0x00, 0x00, 0x00, 0x00};

#define MUS_P22_SND_LEN 20
static const uint8_t mus_p22_snd[MUS_P22_SND_LEN] = {
    0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23, 0x23,
    0x23, 0x23, 0x23, 0x23, 0x00, 0x00, 0x00, 0x00};

#define MUS_P24_SND_LEN 20
static const uint8_t mus_p24_snd[MUS_P24_SND_LEN] = {
    0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,
    0x38, 0x38, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00};

#define MUS_P26_SND_LEN 20
static const uint8_t mus_p26_snd[MUS_P26_SND_LEN] = {
    0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35, 0x35,
    0x35, 0x35, 0x35, 0x35, 0x00, 0x00, 0x00, 0x00};

#define MUS_P27_SND_LEN 40
static const uint8_t mus_p27_snd[MUS_P27_SND_LEN] = {
    0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x38, 0x38, 0x38, 0x38, 0x38, 0x38,
    0x38, 0x38, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x31, 0x31, 0x31, 0x31,
    0x31, 0x31, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24};

#define MUS_P28_SND_LEN 40
static const uint8_t mus_p28_snd[MUS_P28_SND_LEN] = {
    0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45,
    0x45, 0x45, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x10, 0x10,
    0x10, 0x10, 0x10, 0x10};

#define MUS_P29_SND_LEN 40
static const uint8_t mus_p29_snd[MUS_P29_SND_LEN] = {
    0x17, 0x17, 0x17, 0x17, 0x17, 0x17, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x45, 0x45, 0x45, 0x45,
    0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45,
    0x45, 0x45, 0x45, 0x45};

#define MUS_EP_SND_LEN 40
static const uint8_t mus_ep_snd[MUS_EP_SND_LEN] = {
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00};

#define MUS_EP2_SND_LEN 20
static const uint8_t mus_ep2_snd[MUS_EP2_SND_LEN] = {
    0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45,
    0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45, 0x45};

#define JUMP_SND_LEN 20
static const uint8_t jump_snd[JUMP_SND_LEN] = {
    0x80, 0x80, 0x80, 0x80, 0x80, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x25, 0x25, 0x25, 0x25, 0x25};

#define S_SND_LEN 40
static const uint8_t s_snd[S_SND_LEN] = {
    0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x60, 0x60,
    0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x60, 0x30, 0x30, 0x30, 0x30,
    0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10,
    0x10, 0x10, 0x10, 0x10};

#define R1_SND_LEN 6
static const uint8_t r1_snd[R1_SND_LEN] = {0x95, 0x95, 0x95, 0x95, 0x95, 0x95};

#define R2_SND_LEN 6
static const uint8_t r2_snd[R2_SND_LEN] = {0x50, 0x50, 0x50, 0x50, 0x50, 0x50};

#define SHOT_SND_LEN 54
static const uint8_t shot_snd[SHOT_SND_LEN] = {
    0x10, 0x10, 0x10, 0x6e, 0x2a, 0x20, 0x28, 0x28, 0x9b, 0x28, 0x20, 0x20,
    0x21, 0x57, 0x20, 0x20, 0x20, 0x67, 0x20, 0x20, 0x29, 0x20, 0x73, 0x20,
    0x20, 0x20, 0x89, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

#define SHOOT_SND_LEN 27
static const uint8_t shoot_snd[SHOOT_SND_LEN] = {
    0x10, 0x10, 0x10, 0x6e, 0x2a, 0x20, 0x28, 0x28, 0x9b, 0x28, 0x20, 0x20,
    0x21, 0x57, 0x20, 0x20, 0x20, 0x67, 0x20, 0x20, 0x29, 0x20, 0x73, 0x20,
    0x20, 0x20, 0x89};

#define GET_KEY_SND_LEN 90
static const uint8_t get_key_snd[GET_KEY_SND_LEN] = {
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24,
    0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37,
    0x37, 0x37, 0x37, 0x37, 0x20, 0x20, 0x20, 0x20, 0x37, 0x37, 0x37, 0x37,
    0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x20, 0x20, 0x20, 0x20, 0x37, 0x37,
    0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x37, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19, 0x19,
    0x19, 0x19, 0x19, 0x19, 0x19, 0x19};

#define HIT_WALL_SND_LEN 8
static const uint8_t hit_wall_snd[HIT_WALL_SND_LEN] = {
    0x83, 0x83, 0x82, 0x8e, 0x8a, 0x89, 0x86, 0x84};

#define WALK1_SND_LEN 3
static const uint8_t walk1_snd[WALK1_SND_LEN] = {0x8f, 0x8e, 0x8e};

#define WALK2_SND_LEN  3
static const uint8_t walk2_snd[WALK2_SND_LEN] = {0x84, 0x87, 0x84};

#define MEDKIT_SND_LEN 71
static const uint8_t medkit_snd[MEDKIT_SND_LEN] = {
    0x55, 0x20, 0x3a, 0x3a, 0x3a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x33, 0x33, 0x33, 0x33, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x26, 0x26, 0x26, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x16,
    0x16, 0x16, 0x16, 0x16, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x16, 0x16, 0x16, 0x16, 0x16, 0x16, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15, 0x15};

#define MELEE_SND_LEN 3
static const uint8_t melee_snd[MELEE_SND_LEN] = {0x8f, 0x8e, 0x8e};

/* Function prototypes ------------------------------------------------------ */

/**
 * @brief SOUND initialize audio player state.
 *
 */
void sound_init(void);

/**
 * @brief SOUND update sound and execute platform audio player.
 *
 * @param snd    Sound byte array
 * @param len    Byte length of sound
 * @param enable Enable speakers
 */
void sound_play(const uint8_t *snd, uint8_t len, bool enable);

/**
 * @brief SOUND get a new frequency from current sound every (1/140)s period,
 * otherwise return the same one again. Return zero if sound is finished.
 *
 * NOTE: Sounds use inverse frequency format, for more information see:
 * 1. http://fabiensanglard.net/gebbwolf3d_v2.1.pdf chapter 4.9.5
 * 2. http://www.shikadi.net/moddingwiki/Inverse_Frequency_Sound_format
 * 3. http://www.shikadi.net/moddingwiki/AudioT_Format
 *
 * @return uint16_t Next sound frequency
 */
uint16_t sound_get_frequency(void);

#endif /* SOUND_H */

/* -------------------------------------------------------------------------- */